require('dotenv').config();
const express = require('express');
const multer = require('multer');
const { BlobServiceClient, generateBlobSASQueryParameters, BlobSASPermissions, StorageSharedKeyCredential } = require("@azure/storage-blob");
const app = express();
const path = require('path');
const upload = multer({ storage: multer.memoryStorage() });

const mygenerateSAS = require('./generateSAS');
const mygetSecret = require('./azureInit');

const PORT = process.env.PORT || 3000;

const storegeConnectionString = "AZURESTORAGECONNECTIONSTRING";
                            
// Azure Blob Setup
const containerName = process.env.CONTAINER_NAME;
let myconnectionString;

console.log("calling the secret function....neil");
(async () => 
{
    const myconnectionString = mygetSecret(storegeConnectionString);
    console.log(`got the value from inside ${myconnectionString}`);
}) ();
console.log(`got the key....neil ${myconnectionString}`);

const blobServiceClient = BlobServiceClient.fromConnectionString(myconnectionString);
const containerClient = blobServiceClient.getContainerClient(containerName);


app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(express.static('public'));



app.post('/upload', upload.single('file'), async (req, res) => {
  try {
    const blobName = req.file.originalname;
    const blockBlobClient = containerClient.getBlockBlobClient(blobName);

    await blockBlobClient.uploadData(req.file.buffer, {
      blobHTTPHeaders: { blobContentType: req.file.mimetype }
    });

   const sasUrl = mygenerateSAS(blobName);

   res.render('success', { sasUrl });

  } catch (error) {
    console.error(error);
    res.status(500).send('❌ Failed to upload file.');
  }
});

app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});
